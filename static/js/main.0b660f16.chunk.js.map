{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Users/users.module.css","components/Navbar/Navbar.module.css","serviceWorker.js","redux/profileReducer.js","redux/dialogsReducer.js","redux/usersReducer.js","redux/redux-store.js","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Music/Music.jsx","components/News/News.jsx","components/Settings/Settings.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","assets/img/userProfile.png","components/Users/Users.jsx","components/Users/UsersContainer.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ADD_POST","UPD_NEW_POST","initialState","postsData","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","newText","UPD_NEW_MESSAGE","SEND_MESSAGE","dialogs","name","messages","newMessageBody","dialogsReducer","body","FOLLOW","UNFOLLOW","SET_USERS","users","usersReducer","map","u","userId","followed","reducers","combineReducers","profilePage","dialogsPage","usersPage","store","createStore","Header","className","s","header","src","alt","Navbar","nav","item","to","activeClassName","active","Post","props","likeCounter","MyPosts","postsElements","posts","el","newPostElement","React","createRef","postsBlock","onChange","text","current","value","updNewMessageBody","ref","onClick","addPost","MyPostsContainer","connect","dispatch","updNewPostActionCreator","ProfileInfo","source","descriptionBlock","Profile","Music","News","Settings","DialogItem","path","dialog","Message","Dialogs","dialogsElement","d","messageElement","dialogItems","e","target","placeholder","sendMessage","DialogsContainer","updNewMessageBodyCreator","Users","axios","then","response","setUsers","data","items","this","photos","small","userPhoto","styles","unfollow","follow","status","Component","followAC","unfollowAC","setUsersAC","App","render","UsersContainer","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0b660f16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2ApP8\",\"messages\":\"Dialogs_messages__1-xWE\",\"message\":\"Dialogs_message__2yeGr\",\"dialogsItems\":\"Dialogs_dialogsItems__3X7mg\",\"active\":\"Dialogs_active__2mkL-\",\"dialog\":\"Dialogs_dialog__3Sl7h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__tSMvR\",\"posts\":\"MyPosts_posts__2OPVR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3zMnx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1GQIC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3D2Bp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__WRhjO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2RyJ3\",\"item\":\"Navbar_item__3OMqT\",\"active\":\"Navbar_active__2Yq6v\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const ADD_POST = \"ADD-POST\";\r\nconst UPD_NEW_POST = \"UPDATE-NEW-POST-TEXT\";\r\nlet initialState = {\r\n  postsData: [\r\n    { id: 1, message: \"Hello! \", likesCount: \"2\" },\r\n    { id: 2, message: \"How are you?\", likesCount: \"4\" },\r\n  ],\r\n  newPostText: \"Hello\",\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST: {\r\n      let newPost = {\r\n        id: 3,\r\n        message: state.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        postsData: [...state.postsData, newPost],\r\n        newPostText: \"\",\r\n      };\r\n      // stateCopy.postsData = [...state.postsData];\r\n      // stateCopy.postsData.push(newPost);\r\n      // stateCopy.newPostText = \"\";\r\n    }\r\n    case UPD_NEW_POST: {\r\n      return { ...state, newPostText: action.newText };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const addPostActionCreator = () => ({\r\n  type: ADD_POST,\r\n});\r\n\r\nexport const updNewPostActionCreator = (text) => {\r\n  return {\r\n    type: UPD_NEW_POST,\r\n    newText: text,\r\n  };\r\n};\r\n\r\nexport default profileReducer;\r\n","const UPD_NEW_MESSAGE = \"UPDATE-NEW-POST-MESSAGE\";\r\nconst SEND_MESSAGE = \"SEND-NEW-POST-MESSAGE\";\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: \"Dima\" },\r\n    { id: 2, name: \"Andrey\" },\r\n    { id: 3, name: \"Sveta\" },\r\n    { id: 4, name: \"Roflan\" },\r\n    { id: 5, name: \"Max\" },\r\n  ],\r\n  messages: [\r\n    { id: 1, message: \"Hello! How are you?\" },\r\n    { id: 2, message: \"Hello! How are you?2\" },\r\n    { id: 3, message: \"Hello! How are you?3\" },\r\n    { id: 4, message: \"Hello! How are you?4\" },\r\n    { id: 5, message: \"Hello! How are you?5\" },\r\n  ],\r\n  newMessageBody: \"\",\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPD_NEW_MESSAGE:\r\n      return { ...state, newMessageBody: action.body };\r\n\r\n    case SEND_MESSAGE:\r\n      let body = state.newMessageBody;\r\n      return {\r\n        ...state,\r\n        newMessageBody: \"\",\r\n        messages: [...state.messages, { id: 6, message: body }],\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const sendMessageCreator = () => ({\r\n  type: SEND_MESSAGE,\r\n});\r\n\r\nexport const updNewMessageBodyCreator = (body) => {\r\n  return {\r\n    type: UPD_NEW_MESSAGE,\r\n    body: body,\r\n  };\r\n};\r\n\r\nexport default dialogsReducer;\r\n","const FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nlet initialState = {\r\n  users: [],\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: true };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: false };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case SET_USERS: {\r\n      return { ...state, users: [...state.users, ...action.users] };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const followAC = (userId) => ({\r\n  type: FOLLOW,\r\n  userId,\r\n});\r\nexport const unfollowAC = (userId) => ({\r\n  type: UNFOLLOW,\r\n  userId,\r\n});\r\nexport const setUsersAC = (users) => ({\r\n  type: SET_USERS,\r\n  users,\r\n});\r\n\r\nexport default usersReducer;\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  usersPage: usersReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className={s.header}>\r\n      <img\r\n        src=\"https://media.sproutsocial.com/uploads/2017/02/10x-featured-social-media-image-size.png\"\r\n        alt=\"\"\r\n      />\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile\" activeClassName={s.active}>\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/dialogs\" activeClassName={s.active}>\r\n          Messages\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" activeClassName={s.active}>\r\n          Users\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/music\" activeClassName={s.active}>\r\n          Music\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" activeClassName={s.active}>\r\n          News\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" activeClassName={s.active}>\r\n          Settings\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        src=\"https://media.sproutsocial.com/uploads/2017/02/10x-featured-social-media-image-size.png\"\r\n        alt=\"\"\r\n      />\r\n      {props.message}\r\n      <div>like: {props.likeCounter}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Post;\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {\r\n  addPostActionCreator,\r\n  updNewPostActionCreator,\r\n} from \"../../../redux/profileReducer\";\r\n\r\nconst MyPosts = (props) => {\r\n  let postsElements = props.posts.map((el) => (\r\n    <Post message={el.message} likeCounter={el.likesCount} />\r\n  ));\r\n\r\n  let newPostElement = React.createRef();\r\n\r\n  let onAddPost = () => {\r\n    // let text = newPostElement.current.value;\r\n     props.addPost();\r\n    //props.dispatch(addPostActionCreator());\r\n  };\r\n\r\n  let onPostChange = () => {\r\n    let text = newPostElement.current.value;\r\n    props.updNewMessageBody(text);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        <div>\r\n          <textarea\r\n            onChange={onPostChange}\r\n            ref={newPostElement}\r\n            value={props.newPostText}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button onClick={onAddPost}>Add post</button>\r\n        </div>\r\n      </div>\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  addPostActionCreator,\r\n  updNewPostActionCreator,\r\n} from \"../../../redux/profileReducer\";\r\n\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n// const MyPostsContainer = (props) => {\r\n//   // let state = props.store.getState();\r\n\r\n//   return (\r\n//     <StoreContent.Consumer>\r\n//       {(store) => {\r\n//         let addPost = () => {\r\n//           store.dispatch(addPostActionCreator());\r\n//         };\r\n\r\n//         let onPostChange = (text) => {\r\n//           let action = updNewPostActionCreator(text);\r\n//           store.dispatch(action);\r\n//         };\r\n//         return (\r\n//           <MyPosts\r\n//             updNewPostText={onPostChange}\r\n//             addPost={addPost}\r\n//             posts={store.getState().profilePage.postsData}\r\n//             newPostText={store.getState().profilePage.newPostText}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContent.Consumer>\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.postsData,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updNewMessageBody: (text) => {\r\n      let action = updNewPostActionCreator(text);\r\n      dispatch(action);\r\n    },\r\n    addPost: () => {\r\n      dispatch(addPostActionCreator());\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\n\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileInfo = (props) => {\r\n  let source = props.source;\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img src={source} />\r\n      </div>\r\n      <div className={s.descriptionBlock}>ava + descrp</div>\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n// import s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo source=\"https://media.sproutsocial.com/uploads/2017/02/10x-featured-social-media-image-size.png\" />\r\n      <MyPostsContainer\r\n      // store={props.store}\r\n        // posts={props.profilePage.postsData}\r\n        // newPostText={props.profilePage.newPostText}\r\n        // dispatch={props.dispatch}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport s from \"./Music.module.css\";\r\n\r\nconst Music = (props) => {\r\n  return <div>Music</div>;\r\n};\r\n\r\nexport default Music;\r\n","import React from \"react\";\r\nimport s from \"./News.module.css\";\r\n\r\nconst News = (props) => {\r\n  return <div>News</div>;\r\n};\r\n\r\nexport default News;\r\n","import React from \"react\";\r\nimport s from \"./Settings.module.css\";\r\n\r\nconst Settings = (props) => {\r\n  return <div>Settings</div>;\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.message}>{props.text}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {\r\n  sendMessageCreator,\r\n  updNewMessageBodyCreator,\r\n} from \"../../redux/dialogsReducer\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n  let dialogsElement = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} id={d.id} key={d.id} />\r\n  ));\r\n\r\n  let messageElement = state.messages.map((el) => (\r\n    <Message text={el.message} key={el.id} />\r\n  ));\r\n\r\n  let newMessageBody = state.newMessageBody;\r\n\r\n  let onSendMessageClick = () => {\r\n    props.sendMessage();\r\n  };\r\n  let onNewMessageSend = (e) => {\r\n    debugger;\r\n    let body = e.target.value;\r\n    props.updNewMessageBody(body);\r\n  };\r\n  // console.log(messageElement);\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogItems}>{dialogsElement}</div>\r\n      <div className={s.messages}>\r\n        <div>{messageElement}</div>\r\n        <div>\r\n          <textarea\r\n            value={newMessageBody}\r\n            onChange={onNewMessageSend}\r\n            placeholder=\"Enter your message\"\r\n          ></textarea>\r\n        </div>\r\n        <div>\r\n          <button onClick={onSendMessageClick}>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\n\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {\r\n  sendMessageCreator,\r\n  updNewMessageBodyCreator,\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\n// const DialogsContainer = (props) => {\r\n//   // console.log(messageElement);\r\n\r\n//   return (\r\n//     <StoreContent.Consumer>\r\n//       {(store) => {\r\n//         let onSendMessageClick = () => {\r\n//           store.dispatch(sendMessageCreator());\r\n//         };\r\n//         let onNewMessageSend = (body) => {\r\n//           store.dispatch(updNewMessageBodyCreator(body));\r\n//         };\r\n//         return (\r\n//           <Dialogs\r\n//             updNewMessageBody={onNewMessageSend}\r\n//             sendMessage={onSendMessageClick}\r\n//             dialogsPage={store.getState().dialogsPage}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContent.Consumer>\r\n//   );\r\n// };\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: () => {\r\n      dispatch(sendMessageCreator());\r\n    },\r\n    updNewMessageBody: (body) => {\r\n      dispatch(updNewMessageBodyCreator(body));\r\n    },\r\n  };\r\n};\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;\r\n","export default __webpack_public_path__ + \"static/media/userProfile.58de24df.png\";","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport * as axios from \"axios\";\r\nimport userPhoto from \"../../assets/img/userProfile.png\";\r\n\r\nclass Users extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n\r\n  // }\r\n  // getUsers = () => {\r\n  //   if (this.props.users.length === 0) {\r\n  //     axios\r\n  //       .get(\"https://social-network.samuraijs.com/api/1.0/users\")\r\n  //       .then((response) => {\r\n  //         this.props.setUsers(response.data.items);\r\n  //       });\r\n  //   }\r\n  // };\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://social-network.samuraijs.com/api/1.0/users\")\r\n      .then((response) => {\r\n        this.props.setUsers(response.data.items);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <button onClick={this.getUsers}>Get users</button> */}\r\n        {this.props.users.map((u) => (\r\n          <div key={u.id}>\r\n            <span>\r\n              <div>\r\n                <img\r\n                  src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                  alt=\"\"\r\n                  className={styles.userPhoto}\r\n                />\r\n              </div>\r\n            </span>\r\n            <span>\r\n              <div>\r\n                {u.followed ? (\r\n                  <button\r\n                    onClick={() => {\r\n                      this.props.unfollow(u.id);\r\n                    }}\r\n                  >\r\n                    Unfollow\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    onClick={() => {\r\n                      this.props.follow(u.id);\r\n                    }}\r\n                  >\r\n                    follow\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </span>\r\n            <span>\r\n              <span>\r\n                <div>{u.name}</div>\r\n                <div>{u.status}</div>\r\n              </span>\r\n              <span>\r\n                <div>{\"u.location.country\"}</div>\r\n                <div>{\"u.location.city\"}</div>\r\n              </span>\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { followAC, setUsersAC, unfollowAC } from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    users: state.usersPage.users,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    follow: (userId) => {\r\n      dispatch(followAC(userId));\r\n    },\r\n    unfollow: (userId) => {\r\n      dispatch(unfollowAC(userId));\r\n    },\r\n    setUsers: (users) => {\r\n      dispatch(setUsersAC(users));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Music from \"./components/Music/Music\";\nimport News from \"./components/News/News\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\n\nconst App = (props) => {\n  return (\n    <div className=\"app-wrapper\">\n      <Header />\n      <Navbar />\n\n      <div className=\"app-wrapper-content\">\n        <Route path=\"/dialogs\" render={() => <DialogsContainer />} />\n        <Route path=\"/profile\" render={() => <Profile />} />\n        <Route path=\"/users\" render={() => <UsersContainer />} />\n        <Route path=\"/news\" render={() => <News />} />\n        <Route path=\"/music\" render={() => <Music />} />\n        <Route path=\"/settings\" render={() => <Settings />} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport store from \"./redux/redux-store\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\n\n// let rerenderEntireTree = () => {\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App\n        // state={state}\n        // dispatch={store.dispatch.bind(store)}\n        // store={store}\n        />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// };\n// rerenderEntireTree();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}